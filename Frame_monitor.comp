/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Frame_monitor
*
* %I
* Written by:  GS Tucker
* Date: 2023
* Origin: European Spallation Source ERIC
*
* Rectangular Time-of-flight monitor that bins per source-frame.
*
* %D
*
* %P
* INPUT PARAMETERS:
*
* xmin: [m]             Lower x bound of detector opening
* xmax: [m]             Upper x bound of detector opening
* ymin: [m]             Lower y bound of detector opening
* ymax: [m]             Upper y bound of detector opening
* xwidth: [m]           Width of detector. Overrides xmin, xmax
* yheight: [m]          Height of detector. Overrides ymin, ymax
* nt: [1]               Number of time bins
* dt: [mu-s]            Length of each time bin
* frame: [mu-s]         Duration of one frame
* frequency: [Hz]       Source (modulus) frequency, overrides frame length
* filename: [string]    Name of file in which to store the detector image
* restore_neutron: [1]  If set, the monitor does not influence the neutron state
* writefile: [1]        If set to 0, monitor will skip writing to disk, default = 1
*
* %E
*******************************************************************************/

DEFINE COMPONENT Frame_monitor

DEFINITION PARAMETERS ()

SETTING PARAMETERS (frame=0, frequency=0, dt=0, int nt=20, 
                    string filename=0, xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05,
		    xwidth=0, yheight=0, restore_neutron=0, int writefile=1)

OUTPUT PARAMETERS ()
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */

DECLARE
%{
  DArray1d TOF_N;
  DArray1d TOF_p;
  DArray1d TOF_w;
  double period;
  double tick;
  int n_bins;
%}

INITIALIZE
%{
  if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
  if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

  if ((xmin >= xmax) || (ymin >= ymax)) {
          printf("Frame_monitor: %s: Null detection area !\n"
                 "ERROR        (xwidth,yheight,xmin,xmax,ymin,ymax). Exiting",
         NAME_CURRENT_COMP);
    exit(0);
  }
  
  // Allow defining the repetition rate of the source or the frame duration
  period = frequency > 0 ? 1e6 / frequency : frame;
  // Allow defining number of bins *or* bin duration, with duration taking precedence
  n_bins = fabs(dt) > 0 ? (int) fabs(ceil(period / dt)) : nt;
  // then the width of each bin is
  tick = period / (double) n_bins;
  
  TOF_N = create_darr1d(n_bins);
  TOF_p = create_darr1d(n_bins);
  TOF_w = create_darr1d(n_bins);

  for(int i=0; i < n_bins; ++i) {
    TOF_N[i] = 0;
    TOF_p[i] = 0;
    TOF_w[i] = 0;
  }

  // Use instance name for monitor output if no input was given
  if (!strcmp(filename, "\0")) sprintf(filename, "%s", NAME_CURRENT_COMP);
%}

TRACE
%{
  PROP_Z0;
  if (x > xmin && x < xmax && y > ymin && y < ymax)
  {
    int i = floor(fmod(1E6 * t, period) / tick);
    if(i >= 0 && i < n_bins) {
      #pragma acc atomic      
      TOF_N[i] = TOF_N[i] + 1;
      #pragma acc atomic
      TOF_p[i] = TOF_p[i] + p;
      #pragma acc atomic      
      TOF_w[i] = TOF_w[i] + p * p;
      SCATTER;
    }
  }
  if (restore_neutron) {
    RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
  }
%}

SAVE
%{
  if(writefile != 0) {
  DETECTOR_OUT_1D(
      "Frame monitor",
      "Time-of-flight [\\gms]",
      "Intensity",
      "t", 0.0, period, nt,
      &TOF_N[0],&TOF_p[0],&TOF_w[0],
      filename);
  }
%}

FINALLY
%{
  destroy_darr1d(TOF_N);
  destroy_darr1d(TOF_p);
  destroy_darr1d(TOF_w);
%}

MCDISPLAY
%{

  multiline(5, (double)xmin, (double)ymin, 0.0,
               (double)xmax, (double)ymin, 0.0,
               (double)xmax, (double)ymax, 0.0,
               (double)xmin, (double)ymax, 0.0,
               (double)xmin, (double)ymin, 0.0);
%}

END
